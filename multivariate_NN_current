{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import datetime as dt\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.preprocessing import MinMaxScaler, StandardScaler\n",
    "import seaborn as sns\n",
    "import custom_module as cm\n",
    "#import optimizer_module as om"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "#############################################################################\n",
    "####################### DATA PREPROCESSING #################################\n",
    "###########################################################################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 490,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loading the dataset\n",
    "data = pd.read_csv(\"combined_data.csv\", parse_dates=True)\n",
    "data = data[\"2016\":]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load this file for saving time\n",
    "# Saving the data file so we can reload with the features made again to reduce time\n",
    "# data.to_csv('final.csv') \n",
    "data = pd.read_csv(\"final.csv\", parse_dates=True, index_col=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RRP5MIN</th>\n",
       "      <th>RESIDUAL_DEMAND</th>\n",
       "      <th>AVG_PRICE</th>\n",
       "      <th>DIFF_PRICE</th>\n",
       "      <th>hour</th>\n",
       "      <th>weekday</th>\n",
       "      <th>month</th>\n",
       "      <th>business hour</th>\n",
       "      <th>public holiday</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SETTLEMENTDATE</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-01-01 00:00:00</th>\n",
       "      <td>4.096091</td>\n",
       "      <td>1593.93</td>\n",
       "      <td>-1.099790e-01</td>\n",
       "      <td>-0.486409</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-01 00:05:00</th>\n",
       "      <td>5.257498</td>\n",
       "      <td>1557.06</td>\n",
       "      <td>5.624986e-02</td>\n",
       "      <td>1.161408</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-01 00:10:00</th>\n",
       "      <td>5.415838</td>\n",
       "      <td>1510.10</td>\n",
       "      <td>-1.486403e-02</td>\n",
       "      <td>0.158340</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-01 00:15:00</th>\n",
       "      <td>5.415838</td>\n",
       "      <td>1474.70</td>\n",
       "      <td>2.777778e-07</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-01 00:20:00</th>\n",
       "      <td>3.609315</td>\n",
       "      <td>1464.90</td>\n",
       "      <td>-1.497408e-01</td>\n",
       "      <td>-1.806523</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-06-30 23:40:00</th>\n",
       "      <td>5.998145</td>\n",
       "      <td>546.95</td>\n",
       "      <td>1.174183e-01</td>\n",
       "      <td>-0.136612</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-06-30 23:45:00</th>\n",
       "      <td>5.961220</td>\n",
       "      <td>560.19</td>\n",
       "      <td>2.217769e-01</td>\n",
       "      <td>-0.036925</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-06-30 23:50:00</th>\n",
       "      <td>5.066510</td>\n",
       "      <td>559.87</td>\n",
       "      <td>1.298190e-01</td>\n",
       "      <td>-0.894710</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-06-30 23:55:00</th>\n",
       "      <td>5.002401</td>\n",
       "      <td>547.07</td>\n",
       "      <td>1.155798e-01</td>\n",
       "      <td>-0.064109</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-07-01 00:00:00</th>\n",
       "      <td>5.063096</td>\n",
       "      <td>570.31</td>\n",
       "      <td>1.350838e-01</td>\n",
       "      <td>0.060695</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>367777 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                      RRP5MIN  RESIDUAL_DEMAND     AVG_PRICE  DIFF_PRICE  \\\n",
       "SETTLEMENTDATE                                                             \n",
       "2016-01-01 00:00:00  4.096091          1593.93 -1.099790e-01   -0.486409   \n",
       "2016-01-01 00:05:00  5.257498          1557.06  5.624986e-02    1.161408   \n",
       "2016-01-01 00:10:00  5.415838          1510.10 -1.486403e-02    0.158340   \n",
       "2016-01-01 00:15:00  5.415838          1474.70  2.777778e-07    0.000000   \n",
       "2016-01-01 00:20:00  3.609315          1464.90 -1.497408e-01   -1.806523   \n",
       "...                       ...              ...           ...         ...   \n",
       "2019-06-30 23:40:00  5.998145           546.95  1.174183e-01   -0.136612   \n",
       "2019-06-30 23:45:00  5.961220           560.19  2.217769e-01   -0.036925   \n",
       "2019-06-30 23:50:00  5.066510           559.87  1.298190e-01   -0.894710   \n",
       "2019-06-30 23:55:00  5.002401           547.07  1.155798e-01   -0.064109   \n",
       "2019-07-01 00:00:00  5.063096           570.31  1.350838e-01    0.060695   \n",
       "\n",
       "                     hour  weekday  month  business hour  public holiday  \n",
       "SETTLEMENTDATE                                                            \n",
       "2016-01-01 00:00:00     0        0      1              0               1  \n",
       "2016-01-01 00:05:00     0        0      1              0               1  \n",
       "2016-01-01 00:10:00     0        0      1              0               1  \n",
       "2016-01-01 00:15:00     0        0      1              0               1  \n",
       "2016-01-01 00:20:00     0        0      1              0               1  \n",
       "...                   ...      ...    ...            ...             ...  \n",
       "2019-06-30 23:40:00    23        2      6              0               0  \n",
       "2019-06-30 23:45:00    23        2      6              0               0  \n",
       "2019-06-30 23:50:00    23        2      6              0               0  \n",
       "2019-06-30 23:55:00    23        2      6              0               0  \n",
       "2019-07-01 00:00:00     0        0      7              0               0  \n",
       "\n",
       "[367777 rows x 9 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'SETTLEMENTDATE'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2645\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2646\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2647\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'SETTLEMENTDATE'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-29-ea3b3e8a8bf0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Setting the data to index\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"SETTLEMENTDATE\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_datetime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"SETTLEMENTDATE\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"SETTLEMENTDATE\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"SETTLEMENTDATE\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2798\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2799\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2800\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2801\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2802\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   2646\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2647\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2648\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_cast_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2649\u001b[0m         \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtolerance\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtolerance\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2650\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'SETTLEMENTDATE'"
     ]
    }
   ],
   "source": [
    "# Setting the data to index\n",
    "data[\"SETTLEMENTDATE\"] = pd.to_datetime(data[\"SETTLEMENTDATE\"])\n",
    "data.index = data[\"SETTLEMENTDATE\"]\n",
    "data.drop(columns=\"SETTLEMENTDATE\", inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# replace outliers by outlier threshold\n",
    "data = cm.replace_outliers(data, 'RRP5MIN', 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Seperating the test dataset for testing purposes in evaluation\n",
    "X_test = data[\"2019-01-01\":\"2019-06-30\"].copy()\n",
    "X_test = X_test[\"RRP5MIN\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "####################### SOME CHARTS OF THE DATA IN HAND ####################\n",
    "###########################################################################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting the curve Price\n",
    "cm.plot_chart(data[\"RRP5MIN\"].loc[\"2018-02-20\":\"2018-02-21\"], legend=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting the curve Residual Demand\n",
    "# Looks stationary\n",
    "cm.plot_chart(data[\"RESIDUAL_DEMAND\"].loc[\"2019\"], legend=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "THE SERIES IS STATIONARY\n",
      "-------------------\n",
      "  Test Statistics  \n",
      "-------------------\n",
      "ADF Statistic: -24.380617\n",
      "p-value: 0.000000\n",
      "Critical Values:\n",
      "\t1%: -3.430\n",
      "\t5%: -2.862\n",
      "\t10%: -2.567\n",
      "THE SERIES IS STATIONARY\n",
      "-------------------\n",
      "  Test Statistics  \n",
      "-------------------\n",
      "ADF Statistic: -18.665321\n",
      "p-value: 0.000000\n",
      "Critical Values:\n",
      "\t1%: -3.430\n",
      "\t5%: -2.862\n",
      "\t10%: -2.567\n"
     ]
    }
   ],
   "source": [
    "# Testing whether the series is Stationary via Dickey Fuller Test\n",
    "# TESTING FOR PRICE\n",
    "cm.is_Stationary(data.loc[\"2018\"][\"RRP5MIN\"])\n",
    "# TESTING FOR RESIDUAL DEMAND\n",
    "cm.is_Stationary(data.loc[\"2018\"][\"RESIDUAL_DEMAND\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# This function plots the ACF and PACF plots to find useful lags for time series\n",
    "cm.serial_corr(data.loc[\"2018\"]['RRP5MIN'], lags=1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#### ADD CORRELATION PLOT HERE WITH OTHER VARIABLES #####"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ADD MORE IF YOU WANT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#############################################################################\n",
    "####################### FEATURES PREPROCESSING #############################\n",
    "###########################################################################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Avg Price of last 1 hour i.e. 12 data points at 5 minutes granularity\n",
    "data[\"AVG_PRICE\"] = pd.DataFrame(cm.average_hours(data[\"RRP5MIN\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Differencing the average price and creating a differenced price variable\n",
    "data[\"AVG_PRICE\"] = cm.period_difference(data[\"AVG_PRICE\"])\n",
    "data[\"DIFF_PRICE\"] = cm.period_difference(data[\"RRP5MIN\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "############################################################################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate 'hour', 'weekday' and 'month' features\n",
    "data['hour'] = 0\n",
    "data['weekday'] = 0\n",
    "data['month'] = 0\n",
    "for i in range(len(data)):\n",
    "    position = data.index[i]\n",
    "    data['hour'][i] = position.hour\n",
    "    data['weekday'][i] = position.weekday()\n",
    "    data['month'][i] = position.month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# MAKING FEATURES\n",
    "# Generate 'business hour' feature. 7am-7pm business hours\n",
    "data[\"business hour\"] = 0\n",
    "for i in range(len(data)):\n",
    "    position = data.index[i]\n",
    "    hour = position.hour\n",
    "    if ((hour > 7 and hour < 12) or (hour > 14 and hour < 19)):\n",
    "        data[\"business hour\"][i] = 2\n",
    "    elif (hour >= 12 and hour <= 14):\n",
    "        data[\"business hour\"][i] = 1\n",
    "    else:\n",
    "        data[\"business hour\"][i] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-49-ea91571067bf>:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['weekday'][i] = 0\n",
      "<ipython-input-49-ea91571067bf>:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['weekday'][i] = 1\n",
      "<ipython-input-49-ea91571067bf>:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data['weekday'][i] = 2\n"
     ]
    }
   ],
   "source": [
    "# Generate 'weekend' feature\n",
    "for i in range(len(data)):\n",
    "    position = data.index[i]\n",
    "    weekday = position.weekday()\n",
    "    if (weekday == 6):\n",
    "        data['weekday'][i] = 2\n",
    "    elif (weekday == 5):\n",
    "        data['weekday'][i] = 1\n",
    "    else:\n",
    "        data['weekday'][i] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import date\n",
    "import holidays"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "aus_holidays = holidays.CountryHoliday('AUS', prov='SA')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-42-9950f9277a62>:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  data[\"public holiday\"][i] = 1\n"
     ]
    }
   ],
   "source": [
    "data[\"public holiday\"] = 0\n",
    "for i in range(len(data)):\n",
    "    if (data.index[i] in aus_holidays):\n",
    "        data[\"public holiday\"][i] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##### SAVE FILE HERE #####"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#############################################################################\n",
    "########### PREPARING DATA FOR KERAS TO PROCESS PREPROCESSING ##############\n",
    "###########################################################################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "################################## 2 MODELS #######################################################\n",
    "######### 1st for processing Categorical Data for Regression via Multi-Layer Perceptron #########\n",
    "########################### 2nd for processing Time Series via LSTM ##############################\n",
    "################################################################################################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Scaling the RRP between 0 and 1 as required by the NN\n",
    "features = ['RESIDUAL_DEMAND', 'AVG_PRICE', 'DIFF_PRICE']\n",
    "feature_scaler = MinMaxScaler()\n",
    "for i in features:\n",
    "    data[i] = feature_scaler.fit_transform(pd.DataFrame(data[i]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# scale price data to 0-1 range\n",
    "label_scaler = MinMaxScaler()\n",
    "data['RRP5MIN'] = label_scaler.fit_transform(data['RRP5MIN'].values.reshape(-1, 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = data['2016-12-25 00:00:00':].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RRP5MIN</th>\n",
       "      <th>RESIDUAL_DEMAND</th>\n",
       "      <th>AVG_PRICE</th>\n",
       "      <th>DIFF_PRICE</th>\n",
       "      <th>hour</th>\n",
       "      <th>weekday</th>\n",
       "      <th>month</th>\n",
       "      <th>business hour</th>\n",
       "      <th>public holiday</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SETTLEMENTDATE</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-12-25 00:00:00</th>\n",
       "      <td>0.382155</td>\n",
       "      <td>0.495693</td>\n",
       "      <td>0.510764</td>\n",
       "      <td>0.499900</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-12-25 00:05:00</th>\n",
       "      <td>0.396812</td>\n",
       "      <td>0.485116</td>\n",
       "      <td>0.511133</td>\n",
       "      <td>0.500216</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-12-25 00:10:00</th>\n",
       "      <td>0.415440</td>\n",
       "      <td>0.477096</td>\n",
       "      <td>0.511423</td>\n",
       "      <td>0.500279</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-12-25 00:15:00</th>\n",
       "      <td>0.412099</td>\n",
       "      <td>0.470661</td>\n",
       "      <td>0.511468</td>\n",
       "      <td>0.499930</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-12-25 00:20:00</th>\n",
       "      <td>0.408025</td>\n",
       "      <td>0.467627</td>\n",
       "      <td>0.511570</td>\n",
       "      <td>0.499918</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-06-30 23:40:00</th>\n",
       "      <td>0.479225</td>\n",
       "      <td>0.374845</td>\n",
       "      <td>0.511732</td>\n",
       "      <td>0.499929</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-06-30 23:45:00</th>\n",
       "      <td>0.478296</td>\n",
       "      <td>0.378203</td>\n",
       "      <td>0.512227</td>\n",
       "      <td>0.499968</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-06-30 23:50:00</th>\n",
       "      <td>0.455786</td>\n",
       "      <td>0.378122</td>\n",
       "      <td>0.511790</td>\n",
       "      <td>0.499625</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-06-30 23:55:00</th>\n",
       "      <td>0.454173</td>\n",
       "      <td>0.374875</td>\n",
       "      <td>0.511723</td>\n",
       "      <td>0.499958</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-07-01 00:00:00</th>\n",
       "      <td>0.455700</td>\n",
       "      <td>0.380770</td>\n",
       "      <td>0.511815</td>\n",
       "      <td>0.500007</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>264385 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                      RRP5MIN  RESIDUAL_DEMAND  AVG_PRICE  DIFF_PRICE  hour  \\\n",
       "SETTLEMENTDATE                                                                \n",
       "2016-12-25 00:00:00  0.382155         0.495693   0.510764    0.499900     0   \n",
       "2016-12-25 00:05:00  0.396812         0.485116   0.511133    0.500216     0   \n",
       "2016-12-25 00:10:00  0.415440         0.477096   0.511423    0.500279     0   \n",
       "2016-12-25 00:15:00  0.412099         0.470661   0.511468    0.499930     0   \n",
       "2016-12-25 00:20:00  0.408025         0.467627   0.511570    0.499918     0   \n",
       "...                       ...              ...        ...         ...   ...   \n",
       "2019-06-30 23:40:00  0.479225         0.374845   0.511732    0.499929    23   \n",
       "2019-06-30 23:45:00  0.478296         0.378203   0.512227    0.499968    23   \n",
       "2019-06-30 23:50:00  0.455786         0.378122   0.511790    0.499625    23   \n",
       "2019-06-30 23:55:00  0.454173         0.374875   0.511723    0.499958    23   \n",
       "2019-07-01 00:00:00  0.455700         0.380770   0.511815    0.500007     0   \n",
       "\n",
       "                     weekday  month  business hour  public holiday  \n",
       "SETTLEMENTDATE                                                      \n",
       "2016-12-25 00:00:00        2     12              0               1  \n",
       "2016-12-25 00:05:00        2     12              0               1  \n",
       "2016-12-25 00:10:00        2     12              0               1  \n",
       "2016-12-25 00:15:00        2     12              0               1  \n",
       "2016-12-25 00:20:00        2     12              0               1  \n",
       "...                      ...    ...            ...             ...  \n",
       "2019-06-30 23:40:00        2      6              0               0  \n",
       "2019-06-30 23:45:00        2      6              0               0  \n",
       "2019-06-30 23:50:00        2      6              0               0  \n",
       "2019-06-30 23:55:00        2      6              0               0  \n",
       "2019-07-01 00:00:00        0      7              0               0  \n",
       "\n",
       "[264385 rows x 9 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# include time lags of timeseries data for last day i.e. 288 data points at 5 minutes granularity\n",
    "# Also 80 lags of same day previous week\n",
    "\n",
    "# Creating Daily lags\n",
    "for i in range(1,201):\n",
    "    train[\"price_l_{}\".format(i)] = train[\"DIFF_PRICE\"].shift(i)\n",
    "    train[\"demand_l_{}\".format(i)] = train[\"RESIDUAL_DEMAND\"].shift(i)\n",
    "    train[\"avgPrice_l_{}\".format(i)] = train[\"AVG_PRICE\"].shift(i)\n",
    "    \n",
    "\n",
    "# Creating Daily lags\n",
    "for i in range(255,325):\n",
    "    train[\"price_l_{}\".format(i)] = train[\"DIFF_PRICE\"].shift(i)\n",
    "    train[\"demand_l_{}\".format(i)] = train[\"RESIDUAL_DEMAND\"].shift(i)\n",
    "    train[\"avgPrice_l_{}\".format(i)] = train[\"AVG_PRICE\"].shift(i)\n",
    "        \n",
    "    \n",
    "# Creating Week ago lags\n",
    "j = 1\n",
    "size = 2016\n",
    "for i in range(size, size-65, -1):\n",
    "    train[\"w_price_l_{}\".format(j)] = train[\"DIFF_PRICE\"].shift(i)\n",
    "    train[\"w_demand_l_{}\".format(j)] = train[\"RESIDUAL_DEMAND\"].shift(i)\n",
    "    train[\"w_avgPrice_l_{}\".format(j)] = train[\"AVG_PRICE\"].shift(i)\n",
    "    j+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop NANS\n",
    "train.dropna(inplace=True)\n",
    "train.head(5)\n",
    "train = train[\"2017\":]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#################### PROCESSING THE DATA FOR MLP NETWORK ###################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "########### THIS IS FOR MULTILAYER PERCEPTRON PURPOSES\n",
    "train1 = data[['hour', 'weekday', 'month', 'business hour', 'public holiday']]\n",
    "train1 = train1[\"2017\":]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Scaling the categorical variables using the same scaler used for LSTM variables\n",
    "cont = ['hour', 'weekday', 'month', 'business hour', 'public holiday']\n",
    "for i in cont:\n",
    "    train1[i] = feature_scaler.transform(pd.DataFrame(train1[i]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "features1 = train1[train1.index.minute == 0]\n",
    "features1 = features1[features1.index.hour == 0]\n",
    "\n",
    "# Seperating training and test data for Multi-Layer Perceptron Network\n",
    "features_train1 = features1[:'2018']\n",
    "features_test1 = features1['2019':'2019-06-30']\n",
    "\n",
    "# Reshaping the features and test data to NP-Array as per Keras input requirement\n",
    "features_train1 = features_train1.to_numpy().reshape(features_train1.shape[0], features_train1.shape[1])\n",
    "features_test1 = features_test1.to_numpy().reshape(features_test1.shape[0], features_test1.shape[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#################### PROCESSING THE DATA FOR LSTM NETWORK ###################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create feature and label dataframes\n",
    "prelim_features = train.drop(['RRP5MIN', 'RESIDUAL_DEMAND', 'AVG_PRICE', 'DIFF_PRICE', 'hour', 'weekday', 'month', 'business hour', 'public holiday'], axis=1)\n",
    "prelim_labels = pd.DataFrame(train[['RRP5MIN']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((730, 335, 3), (730, 288))"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# format labels to 24 hour output range\n",
    "for i in range(0, 288):\n",
    "    prelim_labels['t_{}'.format(i)] = prelim_labels['RRP5MIN'].shift(-i)\n",
    "prelim_labels.drop(['RRP5MIN'], axis=1, inplace=True)\n",
    "\n",
    "# apply one-day discretization to the data\n",
    "labels = prelim_labels[prelim_labels.index.minute == 0]\n",
    "labels = labels[labels.index.hour == 0]\n",
    "features = prelim_features[prelim_features.index.minute == 0]\n",
    "features = features[features.index.hour == 0]\n",
    "\n",
    "features_train = features[:'2018']\n",
    "features_test = features['2019':'2019-06-30']\n",
    "labels_train = labels[:'2018']\n",
    "\n",
    "samples_train = len(features_train)\n",
    "samples_test = len(features_test)\n",
    "timesteps = 335\n",
    "\n",
    "# convert pandas data frames to numpy ndarrays\n",
    "features_train = features_train.to_numpy().reshape(samples_train, timesteps, 3)\n",
    "features_test = features_test.to_numpy().reshape(samples_test, timesteps, 3)\n",
    "labels_train = labels_train.to_numpy()\n",
    "\n",
    "# check for correct data shape\n",
    "features_train.shape, labels_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.models import Model, load_model\n",
    "from keras.callbacks import ModelCheckpoint\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "import json\n",
    "\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from keras.layers import Input\n",
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "#############################################################################\n",
    "########### CONCATENATE THE 2 NN & COMPILE THEM TO FORM BIGGER NN ##########\n",
    "###########################################################################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.layers import concatenate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating the 2 models\n",
    "mlp = cm.create_mlp((features_train1.shape[1],))\n",
    "lstm = cm.create_conv_lstm((None, features_train.shape[1], 3))                  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Merging the 2 networks into a bigger network \n",
    "combinedInput = concatenate([mlp.output, lstm.output])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Mapping the bigger Network to the output layer to predict one-day ahead i.e. 288 intervals\n",
    "x = Dense(32, activation=\"sigmoid\")(combinedInput)\n",
    "x = Dense(288, activation=\"sigmoid\")(x)\n",
    "model = Model(inputs=[mlp.input, lstm.input], outputs=x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compiling the model with Mean Absolute Error as loss function and Adam as optimizer\n",
    "model.compile(loss='mse', optimizer='adam')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0558\n",
      "Epoch 2/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0549\n",
      "Epoch 3/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0545\n",
      "Epoch 4/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0541\n",
      "Epoch 5/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0541\n",
      "Epoch 6/200\n",
      "23/23 [==============================] - ETA: 0s - loss: 0.054 - 0s 8ms/step - loss: 0.0542\n",
      "Epoch 7/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0541\n",
      "Epoch 8/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0543\n",
      "Epoch 9/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0546\n",
      "Epoch 10/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0550\n",
      "Epoch 11/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0541\n",
      "Epoch 12/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0539\n",
      "Epoch 13/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0546\n",
      "Epoch 14/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0541\n",
      "Epoch 15/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0540\n",
      "Epoch 16/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0539\n",
      "Epoch 17/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0539\n",
      "Epoch 18/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0540\n",
      "Epoch 19/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0539\n",
      "Epoch 20/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0542\n",
      "Epoch 21/200\n",
      "23/23 [==============================] - 0s 7ms/step - loss: 0.0545\n",
      "Epoch 22/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0544\n",
      "Epoch 23/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0544\n",
      "Epoch 24/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0542\n",
      "Epoch 25/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0545\n",
      "Epoch 26/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0542\n",
      "Epoch 27/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0539\n",
      "Epoch 28/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0540\n",
      "Epoch 29/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0541\n",
      "Epoch 30/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0543\n",
      "Epoch 31/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0540\n",
      "Epoch 32/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0537\n",
      "Epoch 33/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0536\n",
      "Epoch 34/200\n",
      "23/23 [==============================] - 0s 7ms/step - loss: 0.0539A: 0s - loss: 0.05\n",
      "Epoch 35/200\n",
      "23/23 [==============================] - 0s 7ms/step - loss: 0.0543\n",
      "Epoch 36/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0541\n",
      "Epoch 37/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0541\n",
      "Epoch 38/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0539\n",
      "Epoch 39/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0539\n",
      "Epoch 40/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0538\n",
      "Epoch 41/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0540\n",
      "Epoch 42/200\n",
      "23/23 [==============================] - 0s 7ms/step - loss: 0.0537\n",
      "Epoch 43/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0536\n",
      "Epoch 44/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0537\n",
      "Epoch 45/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0539\n",
      "Epoch 46/200\n",
      "23/23 [==============================] - 0s 7ms/step - loss: 0.0537\n",
      "Epoch 47/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0536\n",
      "Epoch 48/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0533\n",
      "Epoch 49/200\n",
      "23/23 [==============================] - 0s 8ms/step - loss: 0.0535\n",
      "Epoch 50/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0536\n",
      "Epoch 51/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0534\n",
      "Epoch 52/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0538\n",
      "Epoch 53/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0538\n",
      "Epoch 54/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0537\n",
      "Epoch 55/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0538\n",
      "Epoch 56/200\n",
      "23/23 [==============================] - 0s 7ms/step - loss: 0.0537\n",
      "Epoch 57/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0536\n",
      "Epoch 58/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0534\n",
      "Epoch 59/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0535\n",
      "Epoch 60/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0533\n",
      "Epoch 61/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0536\n",
      "Epoch 62/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0532\n",
      "Epoch 63/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0533\n",
      "Epoch 64/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0535\n",
      "Epoch 65/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0531\n",
      "Epoch 66/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0534\n",
      "Epoch 67/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0532\n",
      "Epoch 68/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0531\n",
      "Epoch 69/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0538\n",
      "Epoch 70/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0534\n",
      "Epoch 71/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0531\n",
      "Epoch 72/200\n",
      "23/23 [==============================] - 0s 7ms/step - loss: 0.0534\n",
      "Epoch 73/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0536\n",
      "Epoch 74/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0535\n",
      "Epoch 75/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0535\n",
      "Epoch 76/200\n",
      "23/23 [==============================] - 0s 3ms/step - loss: 0.0536\n",
      "Epoch 77/200\n",
      "23/23 [==============================] - 0s 3ms/step - loss: 0.0533\n",
      "Epoch 78/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0533\n",
      "Epoch 79/200\n",
      "23/23 [==============================] - 0s 3ms/step - loss: 0.0530\n",
      "Epoch 80/200\n",
      "23/23 [==============================] - 0s 3ms/step - loss: 0.0536\n",
      "Epoch 81/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0534\n",
      "Epoch 82/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0536\n",
      "Epoch 83/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0537\n",
      "Epoch 84/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0543\n",
      "Epoch 85/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0533\n",
      "Epoch 86/200\n",
      "23/23 [==============================] - 0s 3ms/step - loss: 0.0532\n",
      "Epoch 87/200\n",
      "23/23 [==============================] - 0s 3ms/step - loss: 0.0531\n",
      "Epoch 88/200\n",
      "23/23 [==============================] - 0s 3ms/step - loss: 0.0531\n",
      "Epoch 89/200\n",
      "23/23 [==============================] - 0s 3ms/step - loss: 0.0535\n",
      "Epoch 90/200\n",
      "23/23 [==============================] - 0s 3ms/step - loss: 0.0534\n",
      "Epoch 91/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0534\n",
      "Epoch 92/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0528\n",
      "Epoch 93/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0529\n",
      "Epoch 94/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0529\n",
      "Epoch 95/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0533\n",
      "Epoch 96/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0532\n",
      "Epoch 97/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0531\n",
      "Epoch 98/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0531\n",
      "Epoch 99/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0534\n",
      "Epoch 100/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0530\n",
      "Epoch 101/200\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23/23 [==============================] - 0s 3ms/step - loss: 0.0529\n",
      "Epoch 102/200\n",
      "23/23 [==============================] - 0s 3ms/step - loss: 0.0530\n",
      "Epoch 103/200\n",
      "23/23 [==============================] - 0s 3ms/step - loss: 0.0533\n",
      "Epoch 104/200\n",
      "23/23 [==============================] - 0s 3ms/step - loss: 0.0535\n",
      "Epoch 105/200\n",
      "23/23 [==============================] - 0s 3ms/step - loss: 0.0528\n",
      "Epoch 106/200\n",
      "23/23 [==============================] - 0s 3ms/step - loss: 0.0528\n",
      "Epoch 107/200\n",
      "23/23 [==============================] - 0s 3ms/step - loss: 0.0528\n",
      "Epoch 108/200\n",
      "23/23 [==============================] - 0s 3ms/step - loss: 0.0531\n",
      "Epoch 109/200\n",
      "23/23 [==============================] - 0s 3ms/step - loss: 0.0529\n",
      "Epoch 110/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0530\n",
      "Epoch 111/200\n",
      "23/23 [==============================] - 0s 8ms/step - loss: 0.0528\n",
      "Epoch 112/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0530\n",
      "Epoch 113/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0525\n",
      "Epoch 114/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0529\n",
      "Epoch 115/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0529\n",
      "Epoch 116/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0535\n",
      "Epoch 117/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0526\n",
      "Epoch 118/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0528\n",
      "Epoch 119/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0524\n",
      "Epoch 120/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0528\n",
      "Epoch 121/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0530\n",
      "Epoch 122/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0527\n",
      "Epoch 123/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0527\n",
      "Epoch 124/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0529\n",
      "Epoch 125/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0528\n",
      "Epoch 126/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0536\n",
      "Epoch 127/200\n",
      "23/23 [==============================] - 0s 7ms/step - loss: 0.0529\n",
      "Epoch 128/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0527\n",
      "Epoch 129/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0530\n",
      "Epoch 130/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0524\n",
      "Epoch 131/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0526\n",
      "Epoch 132/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0525\n",
      "Epoch 133/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0522\n",
      "Epoch 134/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0529\n",
      "Epoch 135/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0525\n",
      "Epoch 136/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0527\n",
      "Epoch 137/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0523\n",
      "Epoch 138/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0527\n",
      "Epoch 139/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0525\n",
      "Epoch 140/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0523\n",
      "Epoch 141/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0523\n",
      "Epoch 142/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0524\n",
      "Epoch 143/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0524\n",
      "Epoch 144/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0524\n",
      "Epoch 145/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0525\n",
      "Epoch 146/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0523\n",
      "Epoch 147/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0524\n",
      "Epoch 148/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0525\n",
      "Epoch 149/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0525\n",
      "Epoch 150/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0522\n",
      "Epoch 151/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0521\n",
      "Epoch 152/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0527\n",
      "Epoch 153/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0524\n",
      "Epoch 154/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0527\n",
      "Epoch 155/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0527\n",
      "Epoch 156/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0524\n",
      "Epoch 157/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0517\n",
      "Epoch 158/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0521\n",
      "Epoch 159/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0516\n",
      "Epoch 160/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0526\n",
      "Epoch 161/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0530\n",
      "Epoch 162/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0523\n",
      "Epoch 163/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0524\n",
      "Epoch 164/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0519\n",
      "Epoch 165/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0525\n",
      "Epoch 166/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0520\n",
      "Epoch 167/200\n",
      "23/23 [==============================] - 0s 7ms/step - loss: 0.0529\n",
      "Epoch 168/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0521\n",
      "Epoch 169/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0521\n",
      "Epoch 170/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0519\n",
      "Epoch 171/200\n",
      "23/23 [==============================] - 0s 3ms/step - loss: 0.0524\n",
      "Epoch 172/200\n",
      "23/23 [==============================] - 0s 3ms/step - loss: 0.0527\n",
      "Epoch 173/200\n",
      "23/23 [==============================] - 0s 3ms/step - loss: 0.0534\n",
      "Epoch 174/200\n",
      "23/23 [==============================] - 0s 3ms/step - loss: 0.0534\n",
      "Epoch 175/200\n",
      "23/23 [==============================] - 0s 3ms/step - loss: 0.0532\n",
      "Epoch 176/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0527\n",
      "Epoch 177/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0521\n",
      "Epoch 178/200\n",
      "23/23 [==============================] - 0s 3ms/step - loss: 0.0521\n",
      "Epoch 179/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0529\n",
      "Epoch 180/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0527\n",
      "Epoch 181/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0524\n",
      "Epoch 182/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0524\n",
      "Epoch 183/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0519\n",
      "Epoch 184/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0526\n",
      "Epoch 185/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0521\n",
      "Epoch 186/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0521\n",
      "Epoch 187/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0524\n",
      "Epoch 188/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0519\n",
      "Epoch 189/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0521\n",
      "Epoch 190/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0523\n",
      "Epoch 191/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0517\n",
      "Epoch 192/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0517\n",
      "Epoch 193/200\n",
      "23/23 [==============================] - 0s 7ms/step - loss: 0.0520\n",
      "Epoch 194/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0523\n",
      "Epoch 195/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0523\n",
      "Epoch 196/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0522\n",
      "Epoch 197/200\n",
      "23/23 [==============================] - 0s 4ms/step - loss: 0.0521\n",
      "Epoch 198/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0525\n",
      "Epoch 199/200\n",
      "23/23 [==============================] - 0s 5ms/step - loss: 0.0522\n",
      "Epoch 200/200\n",
      "23/23 [==============================] - 0s 6ms/step - loss: 0.0522\n"
     ]
    }
   ],
   "source": [
    "results, hist = cm.train_predict_evaluate(model, features_train1, features_train, labels_train, \n",
    "                                       features_test1, features_test, X_test, X_test.index, label_scaler,\n",
    "                                       32, 200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot of predictions against Actuals\n",
    "cm.plot_chart(results[\"2019-01-01\":\"2019-01-25\"], legend=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Training loss comparision plot\n",
    "cm.plot_chart(pd.DataFrame(hist.history), xlab='Training Epoch', ylab='Mean Squared Error', title='Training and Validation Error over the Course of Training', legend=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE:  2.5836251324217363\n",
      "MSE:  17.52002305505056\n",
      "RMSE:  4.185692661322682\n"
     ]
    }
   ],
   "source": [
    "# Quantifying Performance using MAE, MSE, RMSE\n",
    "cm.quantify_performance(results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "def double_network(dense1, dense2, conv1, lstm1, dropout, act_func, dim_1, dim_2):\n",
    "    # Creates the MLP model to perform regression on the categorical variables\n",
    "\n",
    "    # define our MLP network\n",
    "    model = Sequential()\n",
    "    model.add(Dense(dense1, input_shape=dim_1, activation=\"relu\"))\n",
    "    model.add(Dense(dense2, activation=\"relu\"))\n",
    "    # check to see if the regression node should be added\n",
    "    model_1 = model\n",
    "\n",
    "    # Creates the Conv-LSTM model to perform Time-Series analysis\n",
    "    conv_input_layer = Input(batch_shape=dim_2)\n",
    "\n",
    "    x = Conv1D(conv1, kernel_size=335, strides=335, padding='valid')(conv_input_layer)\n",
    "    x = Dropout(dropout)(x)\n",
    "    x = LSTM(lstm1, recurrent_activation=act_func)(x)\n",
    "    x = Dense(dense2 , activation=act_func)(x)\n",
    "    model = Model(inputs=[conv_input_layer], outputs=[x])\n",
    "    model_2 = model\n",
    " \n",
    "    combinedInput = concatenate([model_1.output, model_2.output])\n",
    "    \n",
    "    x = Dense(dense2, activation=act_func)(combinedInput)\n",
    "    x = Dense(288, activation=act_func)(x)\n",
    "    model = Model(inputs=[mlp.input, lstm.input], outputs=x)\n",
    "    model.compile(loss='mae', optimizer='adam')\n",
    "    return rnn\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Graph disconnected: cannot obtain value for tensor Tensor(\"input_4:0\", shape=(None, 335, 3), dtype=float32) at layer \"conv1d_3\". The following previous layers were accessed without issue: []",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-58-4431839ea2c4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mmodels_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# small model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m models_list.append(double_network(64, 32, 64, 64, 0.1, 'sigmoid', dim_1=(features_train1.shape[1],), \n\u001b[0m\u001b[1;32m      5\u001b[0m                                      dim_2=(None, features_train.shape[1], 3)))\n\u001b[1;32m      6\u001b[0m models_list.append(double_network(64, 32, 64, 64, 0.2, 'sigmoid', dim_1=(features_train1.shape[1],), \n",
      "\u001b[0;32m<ipython-input-57-006aa2cc0c14>\u001b[0m in \u001b[0;36mdouble_network\u001b[0;34m(dense1, dense2, conv1, lstm1, dropout, act_func, dim_1, dim_2)\u001b[0m\n\u001b[1;32m     23\u001b[0m     \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDense\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdense2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mactivation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mact_func\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcombinedInput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m     \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDense\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m288\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mactivation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mact_func\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 25\u001b[0;31m     \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mModel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmlp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlstm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     26\u001b[0m     \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloss\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'mae'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptimizer\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'adam'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mrnn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36m__new__\u001b[0;34m(cls, *args, **kwargs)\u001b[0m\n\u001b[1;32m    240\u001b[0m       \u001b[0;31m# Functional model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    241\u001b[0m       \u001b[0;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mfunctional\u001b[0m  \u001b[0;31m# pylint: disable=g-import-not-at-top\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 242\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfunctional\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFunctional\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    243\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    244\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mModel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcls\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__new__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcls\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/tensorflow/python/training/tracking/base.py\u001b[0m in \u001b[0;36m_method_wrapper\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    455\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_self_setattr_tracking\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    456\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 457\u001b[0;31m       \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    458\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    459\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_self_setattr_tracking\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprevious_value\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/tensorflow/python/keras/engine/functional.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, inputs, outputs, name, trainable)\u001b[0m\n\u001b[1;32m    113\u001b[0m     \u001b[0;31m#     'arguments during initialization. Got an unexpected argument:')\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    114\u001b[0m     \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mFunctional\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrainable\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrainable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 115\u001b[0;31m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_init_graph_network\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    116\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    117\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mtrackable\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mno_automatic_dependency_tracking\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/tensorflow/python/training/tracking/base.py\u001b[0m in \u001b[0;36m_method_wrapper\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    455\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_self_setattr_tracking\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    456\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 457\u001b[0;31m       \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    458\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    459\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_self_setattr_tracking\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprevious_value\u001b[0m  \u001b[0;31m# pylint: disable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/tensorflow/python/keras/engine/functional.py\u001b[0m in \u001b[0;36m_init_graph_network\u001b[0;34m(self, inputs, outputs)\u001b[0m\n\u001b[1;32m    188\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    189\u001b[0m     \u001b[0;31m# Keep track of the network's nodes and layers.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 190\u001b[0;31m     nodes, nodes_by_depth, layers, _ = _map_graph_network(\n\u001b[0m\u001b[1;32m    191\u001b[0m         self.inputs, self.outputs)\n\u001b[1;32m    192\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_network_nodes\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnodes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/tensorflow/python/keras/engine/functional.py\u001b[0m in \u001b[0;36m_map_graph_network\u001b[0;34m(inputs, outputs)\u001b[0m\n\u001b[1;32m    924\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mnest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflatten\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras_inputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    925\u001b[0m           \u001b[0;32mif\u001b[0m \u001b[0mid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcomputable_tensors\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 926\u001b[0;31m             raise ValueError('Graph disconnected: '\n\u001b[0m\u001b[1;32m    927\u001b[0m                              \u001b[0;34m'cannot obtain value for tensor '\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    928\u001b[0m                              \u001b[0;34m' at layer \"'\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mlayer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m'\". '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Graph disconnected: cannot obtain value for tensor Tensor(\"input_4:0\", shape=(None, 335, 3), dtype=float32) at layer \"conv1d_3\". The following previous layers were accessed without issue: []"
     ]
    }
   ],
   "source": [
    "######## CHECKING MODELS ##########\n",
    "models_list = []\n",
    "# small model\n",
    "models_list.append(double_network(64, 32, 64, 64, 0.1, 'sigmoid', dim_1=(features_train1.shape[1],), \n",
    "                                     dim_2=(None, features_train.shape[1], 3)))\n",
    "models_list.append(double_network(64, 32, 64, 64, 0.2, 'sigmoid', dim_1=(features_train1.shape[1],), \n",
    "                                     dim_2=(None, features_train.shape[1], 3)))\n",
    "models_list.append(double_network(64, 32, 64, 64, 0.1, 'relu', dim_1=(features_train1.shape[1],), \n",
    "                                     dim_2=(None, features_train.shape[1], 3)))\n",
    "models_list.append(double_network(64, 32, 64, 64, 0.2, 'relu', dim_1=(features_train1.shape[1],), \n",
    "                                     dim_2=(None, features_train.shape[1], 3)))\n",
    "\n",
    "# Smaller\n",
    "models_list.append(double_network(32, 32, 32, 32, 0.1, 'sigmoid', dim_1=(features_train1.shape[1],), \n",
    "                                     dim_2=(None, features_train.shape[1], 3)))\n",
    "models_list.append(double_network(32, 32, 32, 32, 0.2, 'sigmoid', dim_1=(features_train1.shape[1],), \n",
    "                                     dim_2=(None, features_train.shape[1], 3)))\n",
    "models_list.append(double_network(64, 32, 32, 32, 0.1, 'relu', dim_1=(features_train1.shape[1],), \n",
    "                                     dim_2=(None, features_train.shape[1], 3)))\n",
    "models_list.append(double_network(64, 32, 32, 32, 0.2, 'relu', dim_1=(features_train1.shape[1],), \n",
    "                                     dim_2=(None, features_train.shape[1], 3)))\n",
    "\n",
    "# Going bigger\n",
    "models_list.append(double_network(64, 64, 64, 64, 0.1, 'sigmoid', dim_1=(features_train1.shape[1],), \n",
    "                                     dim_2=(None, features_train.shape[1], 3)))\n",
    "models_list.append(double_network(64, 64, 64, 64, 0.2, 'sigmoid', dim_1=(features_train1.shape[1],), \n",
    "                                     dim_2=(None, features_train.shape[1], 3)))\n",
    "models_list.append(double_network(64, 64, 64, 64, 0.1, 'relu', dim_1=(features_train1.shape[1],), \n",
    "                                     dim_2=(None, features_train.shape[1], 3)))\n",
    "models_list.append(cm.double_network(64, 64, 64, 64, 0.2, 'relu', dim_1=(features_train1.shape[1],), \n",
    "                                     dim_2=(None, features_train.shape[1], 3)))\n",
    "\n",
    "# Even Bigger\n",
    "models_list.append(double_network(64, 64, 128, 64, 0.1, 'sigmoid', dim_1=(features_train1.shape[1],), \n",
    "                                     dim_2=(None, features_train.shape[1], 3)))\n",
    "models_list.append(double_network(64, 64, 128, 64, 0.2, 'sigmoid', dim_1=(features_train1.shape[1],), \n",
    "                                     dim_2=(None, features_train.shape[1], 3)))\n",
    "models_list.append(double_network(64, 64, 64, 64, 0.1, 'relu', dim_1=(features_train1.shape[1],), \n",
    "                                     dim_2=(None, features_train.shape[1], 3)))\n",
    "models_list.append(double_network(64, 64, 64, 64, 0.2, 'relu', dim_1=(features_train1.shape[1],), \n",
    "                                     dim_2=(None, features_train.shape[1], 3)))\n",
    "\n",
    "\n",
    "\n",
    "# train all archtitectures and evaluate performance on the test set\n",
    "for i, rnn in enumerate(models_list):\n",
    "\n",
    "    results, hist = cm.train_predict_evaluate(model, features_train1, features_train, labels_train, \n",
    "                                       features_test1, features_test, X_test, X_test.index, label_scaler,\n",
    "                                       32, 160)\n",
    "    print(\"Model {}\".format(i))\n",
    "    cm.quantify_performance(results)\n",
    "    print(\"--------------------------------------------\")\n",
    "    print(\"--------------------------------------------\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimizer results for real prices\n",
      "\n",
      "Model objective value: -8074\n",
      "Predicted profit = $8074 -> 2e+02% Profit\n",
      "Charged 613.3 MW over 7531 charge intervals (Lost 116.5 MW due to battery inefficiency)\n",
      "Discharged 496.7 MW over 6101 discharge intervals\n",
      "Did nothing during 15168 time intervals\n",
      "Min price: $-83.33, Max price: $1208\n",
      "\n",
      "Optimizer results for predicted prices\n",
      "Profit is incorrect as it is calculating predicted profit not actual profit\n",
      "\n",
      "Model objective value: -1156\n",
      "Predicted profit = $1156 -> 52% Profit\n",
      "Charged 349.9 MW over 4289 charge intervals (Lost 66.48 MW due to battery inefficiency)\n",
      "Discharged 283.4 MW over 3433 discharge intervals\n",
      "Did nothing during 21078 time intervals\n",
      "Min price: $-1.188, Max price: $26.42\n",
      "\n",
      "----------RESULTS----------\n",
      "Max profit possible: $8074\n",
      "Actual profit: $4623 -> 57.26% of max profit possible\n"
     ]
    }
   ],
   "source": [
    "# Input prices into optimizer\n",
    "import optimizer_module as om\n",
    "numDays = 100 # Number of days to run model\n",
    "start = 0 # Starting time interval from price data\n",
    "bStorage0 = 0 # Starting battery charge\n",
    "\n",
    "predPrices = results.iloc[start:start+(numDays*288)][\"prediction\"].tolist()\n",
    "realPrices = results.iloc[start:start+(numDays*288)][\"true values\"].tolist()\n",
    "outputResults = 1\n",
    "outputActions = 1\n",
    "\n",
    "print(\"Optimizer results for real prices\")\n",
    "realNxtAction, realNxtBatCharge, realActions = om.optimize(realPrices, bStorage0, outputResults, outputActions)\n",
    "\n",
    "print(\"\\nOptimizer results for predicted prices\\nProfit is incorrect as it is calculating predicted profit not actual profit\")\n",
    "predNxtAction, predNxtBatCharge, predActions = om.optimize(predPrices, bStorage0, outputResults, outputActions)\n",
    "\n",
    "maxProfit = sum([realActions[i]*realPrices[i]/12 for i in range(numDays*288)])\n",
    "actualProfit = sum([predActions[i]*realPrices[i]/12 for i in range(numDays*288)])\n",
    "\n",
    "print(\"\\n----------RESULTS----------\")\n",
    "print(\"Max profit possible: $%.4g\" % (maxProfit))\n",
    "print(\"Actual profit: $%.4g -> %.4g%% of max profit possible\" % (actualProfit,actualProfit/maxProfit*100))    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "%reload_ext autoreload"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The autoreload extension is already loaded. To reload it, use:\n",
      "  %reload_ext autoreload\n"
     ]
    }
   ],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RRP5MIN</th>\n",
       "      <th>RESIDUAL_DEMAND</th>\n",
       "      <th>AVG_PRICE</th>\n",
       "      <th>DIFF_PRICE</th>\n",
       "      <th>hour</th>\n",
       "      <th>weekday</th>\n",
       "      <th>month</th>\n",
       "      <th>business hour</th>\n",
       "      <th>public holiday</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SETTLEMENTDATE</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-01-01 00:00:00</th>\n",
       "      <td>0.431371</td>\n",
       "      <td>0.640404</td>\n",
       "      <td>0.510651</td>\n",
       "      <td>0.499789</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-01 00:05:00</th>\n",
       "      <td>0.460591</td>\n",
       "      <td>0.631053</td>\n",
       "      <td>0.511441</td>\n",
       "      <td>0.500448</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-01 00:10:00</th>\n",
       "      <td>0.464575</td>\n",
       "      <td>0.619141</td>\n",
       "      <td>0.511103</td>\n",
       "      <td>0.500047</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-01 00:15:00</th>\n",
       "      <td>0.464575</td>\n",
       "      <td>0.610162</td>\n",
       "      <td>0.511174</td>\n",
       "      <td>0.499983</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-01 00:20:00</th>\n",
       "      <td>0.419124</td>\n",
       "      <td>0.607677</td>\n",
       "      <td>0.510462</td>\n",
       "      <td>0.499261</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-06-30 23:40:00</th>\n",
       "      <td>0.479225</td>\n",
       "      <td>0.374845</td>\n",
       "      <td>0.511732</td>\n",
       "      <td>0.499929</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-06-30 23:45:00</th>\n",
       "      <td>0.478296</td>\n",
       "      <td>0.378203</td>\n",
       "      <td>0.512227</td>\n",
       "      <td>0.499968</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-06-30 23:50:00</th>\n",
       "      <td>0.455786</td>\n",
       "      <td>0.378122</td>\n",
       "      <td>0.511790</td>\n",
       "      <td>0.499625</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-06-30 23:55:00</th>\n",
       "      <td>0.454173</td>\n",
       "      <td>0.374875</td>\n",
       "      <td>0.511723</td>\n",
       "      <td>0.499958</td>\n",
       "      <td>23</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-07-01 00:00:00</th>\n",
       "      <td>0.455700</td>\n",
       "      <td>0.380770</td>\n",
       "      <td>0.511815</td>\n",
       "      <td>0.500007</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>367777 rows Ã— 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                      RRP5MIN  RESIDUAL_DEMAND  AVG_PRICE  DIFF_PRICE  hour  \\\n",
       "SETTLEMENTDATE                                                                \n",
       "2016-01-01 00:00:00  0.431371         0.640404   0.510651    0.499789     0   \n",
       "2016-01-01 00:05:00  0.460591         0.631053   0.511441    0.500448     0   \n",
       "2016-01-01 00:10:00  0.464575         0.619141   0.511103    0.500047     0   \n",
       "2016-01-01 00:15:00  0.464575         0.610162   0.511174    0.499983     0   \n",
       "2016-01-01 00:20:00  0.419124         0.607677   0.510462    0.499261     0   \n",
       "...                       ...              ...        ...         ...   ...   \n",
       "2019-06-30 23:40:00  0.479225         0.374845   0.511732    0.499929    23   \n",
       "2019-06-30 23:45:00  0.478296         0.378203   0.512227    0.499968    23   \n",
       "2019-06-30 23:50:00  0.455786         0.378122   0.511790    0.499625    23   \n",
       "2019-06-30 23:55:00  0.454173         0.374875   0.511723    0.499958    23   \n",
       "2019-07-01 00:00:00  0.455700         0.380770   0.511815    0.500007     0   \n",
       "\n",
       "                     weekday  month  business hour  public holiday  \n",
       "SETTLEMENTDATE                                                      \n",
       "2016-01-01 00:00:00        0      1              0               1  \n",
       "2016-01-01 00:05:00        0      1              0               1  \n",
       "2016-01-01 00:10:00        0      1              0               1  \n",
       "2016-01-01 00:15:00        0      1              0               1  \n",
       "2016-01-01 00:20:00        0      1              0               1  \n",
       "...                      ...    ...            ...             ...  \n",
       "2019-06-30 23:40:00        2      6              0               0  \n",
       "2019-06-30 23:45:00        2      6              0               0  \n",
       "2019-06-30 23:50:00        2      6              0               0  \n",
       "2019-06-30 23:55:00        2      6              0               0  \n",
       "2019-07-01 00:00:00        0      7              0               0  \n",
       "\n",
       "[367777 rows x 9 columns]"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
